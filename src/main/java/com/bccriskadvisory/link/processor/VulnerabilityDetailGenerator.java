package com.bccriskadvisory.link.processor;

import static com.google.common.base.Preconditions.checkNotNull;

import java.util.Collections;
import java.util.List;

import org.pegdown.PegDownProcessor;
import org.pegdown.ast.RootNode;

import com.bccriskadvisory.link.connector.EdgescanV1Connector;
import com.bccriskadvisory.link.rest.edgescan.EdgescanResponse;
import com.bccriskadvisory.link.rest.edgescan.Vulnerability;
import com.bccriskadvisory.link.rest.edgescan.VulnerabilityDetails;
import com.google.common.base.Joiner;
import com.google.common.collect.Lists;

public class VulnerabilityDetailGenerator {

	private static final String LINE_BREAK = "\n----\n";
	private EdgescanV1Connector connector;
	private PegDownProcessor pegDownProcessor = new PegDownProcessor();
	
	public VulnerabilityDetailGenerator(EdgescanV1Connector connector) {
		this.connector = checkNotNull(connector, "Edgescan Connector");
	}
	
	public String getDetails(int vulnId) {
		EdgescanResponse response = connector.vulnerabilities().withId(vulnId).execute();
		final String externalLink = generateExternalLink(vulnId);
		
		if (response.getDetailedVulnerability().isPresent()) {
			Vulnerability vulnerability = response.getDetailedVulnerability().get();
			List<String> convertedDetails = Lists.newArrayList(); 
			
			for (VulnerabilityDetails detail : vulnerability.getDetails().or(Collections.emptyList())) {
				RootNode parsed = pegDownProcessor.parseMarkdown(detail.getSrc().toCharArray());
				convertedDetails.add(new ConfluenceWikiMarkupSerializer().toWikiMarkup(parsed));
			}
			
			return Joiner.on(LINE_BREAK).join(convertedDetails) + LINE_BREAK + externalLink  ;
		} else {
			return externalLink;
		}
	}
	

	private String generateExternalLink(int vulnId) {
		final String vulnerabilityUrl = connector.vulnerabilityUrl(vulnId);
		
		return "The full details of this vulnerability can be found [here|" + vulnerabilityUrl + "].";
	}
}
