// Generated by CoffeeScript 1.9.3
(function() {
  var $, addDustContext, ajax_call, buildParams, destroy, get, inputValue, nop, optionSelected, post, put, renderErrors, responseHandler, showDialog;

  nop = function() {};

  dust.debugLevel = "DEBUG";

  $ = AJS.$;

  buildParams = function(names) {
    var content, i, len, name, value;
    content = {};
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      value = inputValue(name);
      if (value && value.length) {
        content[name] = value;
      }
    }
    return content;
  };

  inputValue = function(key) {
    var input, value;
    input = $("#" + key);
    switch (input.attr("type")) {
      case "text":
      case "hidden":
        return input.attr("value");
      case "checkbox":
        if (input.is(":checked")) {
          return "true";
        } else {
          return "false";
        }
        break;
      default:
        if (input.is("select")) {
          if (input.is("[multiple]")) {
            value = [];
            input.find("option:selected").each(function() {
              return value.push($(this).attr("value"));
            });
            return value;
          } else {
            return input.find("option:selected").attr("value");
          }
        }
    }
  };

  ajax_call = function(method) {
    return function(url, data, onComplete, onError) {
      if (onError == null) {
        onError = nop;
      }
      return AJS.$.ajax({
        url: url,
        type: method,
        contentType: "application/json",
        data: JSON.stringify(data),
        processData: false,
        success: onComplete,
        error: onError
      });
    };
  };

  get = ajax_call("GET");

  destroy = ajax_call("DELETE");

  post = ajax_call("POST");

  put = ajax_call("PUT");

  addDustContext = function(data) {
    if (data == null) {
      data = {};
    }
    data.optionSelected = optionSelected;
    return data;
  };

  optionSelected = function(chunk, context) {
    var selected, value;
    selected = context.get("selected");
    value = context.get("value");
    if (selected && selected.constructor === Array) {
      if ((("" + selected).indexOf(value)) > -1) {
        return chunk.write("selected");
      }
    } else {
      if (("" + selected) === value) {
        return chunk.write("selected");
      }
    }
  };

  responseHandler = function(handler) {
    return function(response) {
      if (response && response.errorMessages.length) {
        return renderErrors(response.errorMessages);
      } else {
        return handler(response);
      }
    };
  };

  renderErrors = function(errors) {
    var error, i, len, results;
    results = [];
    for (i = 0, len = errors.length; i < len; i++) {
      error = errors[i];
      results.push(AJS.messages.error("#alerts", {
        title: error.type,
        body: error.message
      }));
    }
    return results;
  };

  (function(baseUrl, paramNames) {
    var createListener, deleteListener, editListener, elementById, idUrl, initTable, mergeFormData, populateForm, replaceFormElement, testListener, updateListener;
    AJS.toInit(function() {
      if ($("#connection-config-container").length) {
        populateForm();
        return initTable();
      }
    });
    populateForm = function() {
      return get(baseUrl + "/form?action=create", {}, function(response) {
        var container;
        container = $("#form").empty();
        return dust.render('form/form', response.form, function(err, html) {
          container.append(html);
          return container.find("#connection-form").submit(createListener);
        });
      });
    };
    initTable = function() {
      return get(baseUrl, {}, function(response) {
        return dust.render('connection/connection-table', response, function(err, html) {
          $("#connection-table").html(html);
          $(".edit").click(editListener);
          $(".delete").click(deleteListener);
          return $(".test", response.ID).click(testListener);
        });
      });
    };
    createListener = function(e) {
      e.preventDefault();
      return post(baseUrl, buildParams(paramNames), function(response) {
        var connection;
        if (response.errorMessages) {
          return renderErrors(response.errorMessages);
        } else {
          connection = response.connection;
          return dust.render('connection/connection-row', connection, function(err, html) {
            $("#connection-table tbody").append(html);
            elementById(".edit", connection.ID).click(editListener);
            elementById(".delete", connection.ID).click(deleteListener);
            elementById(".test", connection.ID).click(testListener);
            return populateForm();
          });
        }
      });
    };
    updateListener = function(e) {
      var id;
      e.preventDefault();
      id = $(this).find("#ID").attr("value");
      return put(idUrl(id), buildParams(paramNames), responseHandler(function(response) {
        return dust.render('connection/connection-row', response.connection, function(err, html) {
          elementById("tr", id).replaceWith(html);
          elementById(".edit", id).click(editListener);
          elementById(".delete", id).click(deleteListener);
          elementById(".test", id).click(testListener);
          return populateForm();
        });
      }));
    };
    editListener = function() {
      var id;
      id = AJS.$(this).attr("data_id");
      return get((idUrl(id)) + "?action=update", {}, function(response) {
        var formData;
        formData = mergeFormData(response.form, response.connection);
        return dust.render('form/form', formData, function(err, html) {
          replaceFormElement(html);
          AJS.$("#connection-form").submit(updateListener);
          return AJS.$("#connection-form #cancel").click(function(e) {
            e.preventDefault();
            return populateForm();
          });
        });
      });
    };
    deleteListener = function() {
      var id;
      id = AJS.$(this).attr("data_id");
      return destroy(idUrl(id), function(response) {
        return elementById("tr", id).remove();
      });
    };
    testListener = function() {
      var id;
      id = $(this).attr("data_id");
      return get((idUrl(id)) + "/test", {}, function(response) {
        var error;
        if (response && response.errorMessages.length) {
          error = response.errorMessages[0];
          return showDialog(error.type, error.message);
        } else {
          return showDialog("Test successful", "Successfully connected to Edgescan");
        }
      });
    };
    replaceFormElement = function(html) {
      AJS.$("#form").empty();
      return AJS.$("#form").html(html);
    };
    idUrl = function(id) {
      return baseUrl + ("/" + id);
    };
    elementById = function(element, id) {
      return AJS.$(element + "[data_id=\"" + id + "\"]");
    };
    return mergeFormData = function(formStructure, connection) {
      var i, input, len, ref;
      if (connection == null) {
        connection = {};
      }
      ref = formStructure.inputs;
      for (i = 0, len = ref.length; i < len; i++) {
        input = ref[i];
        input.value = connection[input.name];
      }
      return formStructure;
    };
  })("/jira/rest/eslink/1.0/connections", ['ID', 'name', 'description', 'url', 'apiKey', 'pollingInterval', 'isEnabled']);

  showDialog = function(title, body) {
    var dialogStructure, id;
    id = "esj-dialog";
    dialogStructure = {
      title: title,
      body: body,
      id: id
    };
    return dust.render('common/dialog', dialogStructure, function(err, html) {
      var dialog;
      $("#dialog-container").append(html);
      dialog = AJS.dialog2("#" + id);
      dialog.show();
      return $("#dialog-close-button").click(function() {
        return dialog.hide();
      });
    });
  };

  (function(baseUrl) {
    var createListener, editLink, initPage, linkParams, manualImport, mergeFormData, paramNames, projectKey, projectUrl, renderForm, renderLink, root, updateForm, updateListener;
    AJS.toInit(function() {
      if (root().length) {
        return initPage();
      }
    });
    initPage = function() {
      return get(projectUrl(), {}, renderLink, editLink);
    };
    renderLink = function(response) {
      return dust.render('project-link/page', response, function(err, html) {
        root().html(html);
        $("#edit-link").click(editLink);
        $("#enable-disable").click(function() {
          return put((projectUrl()) + "/toggle", {}, renderLink);
        });
        $("#import-updated").click(function() {
          return manualImport("updated");
        });
        return $("#import-all").click(function() {
          return manualImport("all");
        });
      });
    };
    editLink = function() {
      return get((projectUrl()) + "/edit", {}, renderForm);
    };
    renderForm = function(response) {
      var mergedForm;
      mergedForm = mergeFormData(response.form, response.link);
      return dust.render('form/form', mergedForm, function(err, html) {
        root().html(html);
        root().find("#connectionId").change(updateForm);
        root().find("#issueTypeId").change(updateForm);
        if (("" + response.link.ID) === "0") {
          return root().find("#project-link-form").submit(createListener);
        } else {
          root().find("#project-link-form").submit(updateListener);
          return root().find("#cancel").click(function(e) {
            e.preventDefault();
            return initPage();
          });
        }
      });
    };
    createListener = function(e) {
      e.preventDefault();
      return post(baseUrl, linkParams(), responseHandler(renderLink));
    };
    updateListener = function(e) {
      e.preventDefault();
      return put(projectUrl(), linkParams(), responseHandler(renderLink));
    };
    updateForm = function() {
      var link;
      link = linkParams();
      return put(baseUrl + "/form", link, function(response) {
        response.link = link;
        return renderForm(response);
      });
    };
    manualImport = function(modeString) {
      var testMode;
      testMode = $("#test-mode").is(":checked");
      $("#import-spinner").spin();
      $("#import-results").hide();
      return put((projectUrl()) + "/import?mode=" + modeString + "&testMode=" + testMode, {}, function(response) {
        return dust.render('project-link/import-results', response.importResults, function(err, html) {
          $("#import-results").html(html);
          $("#import-spinner").spinStop();
          return $("#import-results").show();
        });
      });
    };
    mergeFormData = function(form, data) {
      var i, input, j, len, len1, ref, ref1, section;
      if (!data) {
        return;
      }
      ref = form.inputs;
      for (i = 0, len = ref.length; i < len; i++) {
        input = ref[i];
        input.value = data[input.name];
      }
      ref1 = form.sections;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        section = ref1[j];
        mergeFormData(section, data);
      }
      return addDustContext(form);
    };
    projectKey = function() {
      return $("[name=projectKey]").attr("content");
    };
    projectUrl = function() {
      return baseUrl + "/" + (projectKey());
    };
    linkParams = function() {
      return buildParams(paramNames);
    };
    root = function() {
      return $("#project-link-container");
    };
    return paramNames = ["ID", "projectKey", "connectionId", "isEnabled", "assets", "minimalPriorityId", "lowPriorityId", "mediumPriorityId", "highPriorityId", "criticalPriorityId", "userKey", "issueTypeId", "openStatusId", "closeStatusId"];
  })("/jira/rest/eslink/1.0/links");

  (function(baseUrl) {
    var linkFound, linkNotFound, projectUrl, projectkey, root;
    root = function() {
      return $("#es-project-link-summary-container");
    };
    projectUrl = function() {
      return baseUrl + "/" + (projectkey());
    };
    projectkey = function() {
      return $("#project-config-details-project-key").html();
    };
    AJS.toInit(function() {
      if (root().length) {
        return get(projectUrl(), {}, linkFound, linkNotFound);
      }
    });
    linkFound = function(response) {
      return dust.render('project-link/summary', response, function(err, html) {
        root().html(html);
        return root().find("#enable-disable").click(function() {
          return put((projectUrl()) + "/toggle", {}, linkFound);
        });
      });
    };
    return linkNotFound = function(response) {
      return dust.render('project-link/summary', {}, function(err, html) {
        return root().html(html);
      });
    };
  })("/jira/rest/eslink/1.0/links");

}).call(this);
